package lisr.kis.base.zuul.fallback;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.springframework.cloud.netflix.zuul.filters.route.FallbackProvider;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.stereotype.Component;

import com.netflix.hystrix.exception.HystrixTimeoutException;

/**
 * 路由微服务失败时fallback处理
 * 
 * @author Admin
 *
 */
@Component
public class CustomerFallback implements FallbackProvider {

	@Override
	public String getRoute() {
		// 表明是为哪个微服务提供回退，*表示为所有微服务提供回退
		return "*";
	}

	@Override
	public ClientHttpResponse fallbackResponse(String route, Throwable cause) {
		// TODO Auto-generated method stub
		if (cause instanceof HystrixTimeoutException) {
	           return response(HttpStatus.GATEWAY_TIMEOUT);
	       } else {
	           return this.fallbackResponse();
	       }
	}
	
	@Override
	   public ClientHttpResponse fallbackResponse() {
	       return this.response(HttpStatus.INTERNAL_SERVER_ERROR);
	   }
	 
	   private ClientHttpResponse response(final HttpStatus status) {
	       return new ClientHttpResponse() {
	           @Override
	           public HttpStatus getStatusCode() throws IOException {
	               return status;
	           }
	 
	           @Override
	           public int getRawStatusCode() throws IOException {
	               return status.value();
	           }
	 
	           @Override
	           public String getStatusText() throws IOException {
	               return status.getReasonPhrase();
	           }
	 
	           @Override
	           public void close() {
	           }
	 
	           @Override
	           public InputStream getBody() throws IOException {
	               return new ByteArrayInputStream("服务不可用，请稍后再试。".getBytes());
	           }
	 
	           @Override
	           public HttpHeaders getHeaders() {
	               // headers设定
	               HttpHeaders headers = new HttpHeaders();
	               MediaType mt = new MediaType("application", "json", Charset.forName("UTF-8"));
	               headers.setContentType(mt);
	               return headers;
	           }
	       };
	   }

}
